-- Practice Problems I solved using a database downloaded from this website https://sqlpracticeproblems.com/Resources/. 
Showing the question first followed by my SQL query. Please Check them out! Thanks !

/*Return all fields from shippers*/ --SELECT * FROM shippers ;

/* All fields of Categories with only two columns */ --SELECT CategoryName, Description  FROM Categories ; 

/* Just firstname, lastname, hiredate who are sales reps */ --SELECT FirstName, LastName, HireDate  FROM employees WHERE Title = 'Sales Representative';

/* Same as before but who live in the USA */ -- SELECT FirstName, LastName, HireDate   FROM employees WHERE Title = 'Sales Representative' AND Country = 'USA';

/* All orders placed by EmployeeID 5 */ -- SELECT OrderID, OrderDate FROM orders WHERE EmployeeID = '5';

/* In suppliers table .. show SupplierId, ContactName, ContactTitle for those whose ContactTitle is not Marketing Manager */ --SELECT SupplierID, ContactName, ContactTitle FROM suppliers WHERE NOT ContactTitle = 'Marketing Manager';

/* In products table , see ProductID and ProductName where ProductName includes string "queso" */ -- SELECT ProductID, ProductName  FROM products WHERE ProductName LIKE '%Queso%' ;

/* Query showing OrderID, CustomerID, and ShipCountry where ShipCountry is either France or Belgium */ -- SELECT OrderID, CustomerID, ShipCountry  FROM orders WHERE ShipCountry = 'France' OR ShipCountry ='Belgium'; 

/* Show all orders from Latin America */ -- SELECT OrderID, CustomerID, ShipCountry FROM orders WHERE ShipCountry IN ('Brazil', 'Mexico', 'Argentina', 'Venezuela');

/* Order all Employees by BirthDate with oldes first and having columns FirstName, LastName, Title, BirthDate */ -- SELECT FirstName, LastName, Title, BirthDate FROM employees ORDER BY BirthDate ASC ;


/* SHow a list of countries where Northwind company has customers */ -- SELECT DISTINCT Country FROM customers   ; 

/* SHow list of all different values in Customers Table for ContactTitles. Include a count for each... */ -- SELECT ContactTitle, COUNT(*) AS TotalContactTitle FROM customers GROUP BY ContactTitle ORDER BY TotalContactTitle DESC;

/* Show ProductID, ProductName, and Supplier name.. Use the Join clause for suppliers to products table */ --  SELECT ProductID, ProductName, CompanyName AS Supplier FROM products AS p JOIN suppliers AS s ON p.SupplierID = s.SupplierID  ;

/* List of orders made including the Shipper.. Show OrderID, OrderDate, CompanyName of the Shipper and sort by OrderID. Show rows OrderID less than 10270 */

--SELECT OrderID, OrderDate, CompanyName AS Shipper FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID WHERE OrderID < 10270;

/* Total number of products in each category. Sort results by total number of products in descending order */ -- SELECT CategoryName, COUNT(*) AS TotalProducts FROM products JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY CategoryName ORDER BY TotalProducts DESC;

17. /* In Customers table, show total number of customers per Country and City */ -- SELECT Country, City, COUNT(*) AS TotalCustomers FROM customers GROUP BY Country, City ORDER BY TotalCustomers DESC ;

/* 18. Show the ProductID, ProductName, and the CompanyName of Supplier */ --SELECT products.ProductID, products.ProductName, suppliers.CompanyName AS Supplier FROM products JOIN suppliers ON products.SupplierID = suppliers.SupplierID ;

/* 19. Show a list of orders. Showing OrerID, OrderDate, CompanyName of shipper, and sort by OrderID. Show only rows with OrderID < 10270 */ 
--SELECT OrderID, OrderDate, CompanyName AS Shipper FROM orders JOIN shippers ON orders.ShipVia = shippers.ShipperID ; 

/* 20. SHow total number of products in each category. Sort by total products in descending order */ -- SELECT categories.CategoryName, COUNT(*) AS TotalProducts FROM products JOIN categories ON products.CategoryID = categories.CategoryID GROUP BY categories.CategoryName ORDER BY TotalProducts DESC; 

/* 21. Show the total number of customers per Country and City */ --SELECT Country, City, COUNT(*) AS TotalCustomers  FROM customers GROUP BY Country, City ORDER BY TotalCustomers DESC ; 

/* 22. Products in inventory that should be reordered using UnitsInStock and ReorderLevel, Where UnitsInStock < ReorderLevel */ -- SELECT ProductID, ProductName, UnitsInStock, ReorderLevel FROM products  WHERE UnitsInStock <= ReorderLevel ; 

/* Incorporate these columns in query, UnitsInStock, UnitsOnOrder, ReorderLevel, Discontinued --- UnitsInStock + UnitsOnOrder <=ReorderLevel, The Discontinued flag is false(0) */ 
--SELECT ProductID, ProductName, UnitsInStock, UnitsOnOrder, ReorderLevel, Discontinued FROM products WHERE UnitsInStock + UnitsOnOrder <= ReorderLevel AND Discontinued = 0;

/* Set the columns to CustomerID, CompanyName, Region , where NULL Region is at the bottom. Within same regions companies should be sorted by CustomerID */
--SELECT CustomerID, CompanyName, Region FROM customers  ORDER BY  CASE WHEN Region is  NULL THEN 1 ELSE 0 END  , Region, CustomerID DESC; 

/* 25.  Return the three ship countries with  the highest average freight overall, in descending order by average freight */ SELECT * FROM employees ;

/* 26. Return the three ship countries with  the highest average freight overall, in descending order by average freight */ -- SELECT TOP 3 ShipCountry, AVG(Freight) AS AverageFreight FROM orders GROUP BY ShipCountry ORDER BY AverageFreight DESC;

/* 27. Same question as above but only orders from the year 2015 */ -- SELECT TOP 3 ShipCountry, AVG(Freight) AS AverageFreight FROM orders WHERE OrderDate LIKE '%2015%' GROUP BY ShipCountry ORDER BY AverageFreight DESC ;

/* 28. Now get 3 ship countries with highest average freight charge.. Use last 12 months of order data */ 
-- SELECT TOP 3 ShipCountry, AVG(Freight) AS AverageFreight FROM orders WHERE OrderDate >= Dateadd(yy, -1, (SELECT MAX(OrderDate) FROM orders)) GROUP BY ShipCountry ORDER BY AverageFreight DESC ;

/* 29 .. Show employee and Order Detail info like below. Sort by OrderID and ProductID */ -- SELECT e.EmployeeID, e.LastName, od.OrderID, p.ProductName, od.Quantity FROM employees AS e JOIN orders AS o ON e.EmployeeID = o.EmployeeID JOIN OrderDetails AS od ON o.OrderID = od.OrderID JOIN products AS p ON od.ProductID = p.ProductID ;

/* Show all customers who have placed no orders */ -- SELECT c.CustomerID, o.CustomerID FROM customers AS c LEFT JOIN orders AS o ON o.CustomerID = c.CustomerID WHERE o.CustomerID IS NULL; 

/* Show only customers who have never placed an order with Margaret Peacock */ -- SELECT DISTINCT o.CustomerID FROM customers AS c LEFT JOIN orders AS o ON c.CustomerID = o.CustomerID JOIN employees AS e ON o.EmployeeID = e.EmployeeID WHERE o.CustomerID NOT IN (SELECT c.CustomerID FROM customers AS c LEFT JOIN orders AS o ON c.CustomerID = o.CustomerID JOIN employees AS e ON o.EmployeeID = e.EmployeeID  WHERE e.EmployeeID = 4); 


/* Consider orders made only in 2016, select all customers who have bought an order worth 10,000 >= */ -- SELECT c.CustomerID, c.CompanyName, o.OrderID, (SUM(od.UnitPrice * od.Quantity)) AS TotalOrderAmount FROM customers AS c JOIN orders AS o ON c.CustomerID = o.CustomerID JOIN orderdetails AS od ON o.OrderID = od.OrderID  GROUP BY c.CustomerID, c.CompanyName, o.OrderID ORDER BY TotalOrderAmount  DESC ; 

/* Same question as above except customers who have orders more than 15000 and in 2016 */ 
 -- SELECT  c.CustomerID, c.CompanyName, o.OrderID, (SUM(od.UnitPrice * od.Quantity)) AS TotalOrderAmount FROM customers AS c JOIN orders AS o ON c.CustomerID = o.CustomerID JOIN orderdetails AS od ON o.OrderID = od.OrderID WHERE o.OrderDate >= '20160101' AND o.Orderdate < '20170101'  GROUP BY c.CustomerID, c.CompanyName, o.OrderID HAVING SUM(Quantity * UnitPrice) >15000 ORDER BY TotalOrderAmount  DESC ;

/* 34.  Change answer to use the discount when calculating high value customers . Order by total amount. */ -- SELECT  c.CustomerID, c.CompanyName, o.OrderID, (SUM(od.UnitPrice * od.Quantity)) AS TotalOrderAmount FROM customers AS c JOIN orders AS o ON c.CustomerID = o.CustomerID JOIN orderdetails AS od ON o.OrderID = od.OrderID WHERE o.OrderDate >= '20160101' AND o.Orderdate < '20170101'  GROUP BY c.CustomerID, c.CompanyName, o.OrderID HAVING SUM(Quantity * UnitPrice) >15000 ORDER BY TotalOrderAmount  DESC ;


/* Change answer to use the discount when calculating high value customers . Order by total amount. */
 -- SELECT  c.CustomerID, c.CompanyName, o.OrderID, (SUM(od.UnitPrice * od.Quantity)) AS TotalOrderAmount_Without_Discount, (SUM(od.UnitPrice * od.Quantity * (1 - od.Discount))) AS TotalOrderAmount_With_Discount FROM customers AS c JOIN orders AS o ON c.CustomerID = o.CustomerID JOIN orderdetails AS od ON o.OrderID = od.OrderID WHERE o.OrderDate >= '20160101' AND o.Orderdate < '20170101'  GROUP BY c.CustomerID, c.CompanyName, o.OrderID HAVING SUM(Quantity * UnitPrice * (1-Discount)) >15000 ORDER BY TotalOrderAmount_With_Discount   DESC ;

/* Show all orders made on the last day of the month. Order by EmployeeID and OrderID */ -- SELECT EmployeeID, OrderID, OrderDate  FROM orders WHERE OrderDate = EOMONTH(OrderDate) ORDER BY EmployeeID, OrderID  ;

/* Show the 10 orders with the most line items, in order of total line items */ -- SELECT OrderID, COUNT(*) AS TotalOrderDetails FROM OrderDetails GROUP BY OrderID ORDER BY TotalOrderDetails DESC ;

/* Show a random set of 2% of all orders */ -- SELECT TOP 2 Percent OrderID FROM orders ORDER BY NewID() ;

/* Show all OrderID's with a quantity of 60 or more. We are trying to spot a duplicate order accidentally entered into the system with different ProductID. */ -- SELECT OrderID, COUNT(*) AS HI FROM orderdetails WHERE Quantity >= 60 GROUP BY OrderID, Quantity HAVING COUNT(*) > 1 ORDER BY OrderID ASC; 

/* 39.  Show details of the order from the previous question.. for orders that match the above criteria */ -- SELECT * FROM OrderDetails WHERE OrderID in (SELECT OrderID FROM orderdetails WHERE Quantity >= 60 GROUP BY OrderID, Quantity HAVING COUNT(*) > 1) ORDER BY OrderID, Quantity  ; 

/* Correct SQL below (SELECT od.OrderID, ProductID, UnitPrice, Quantity, Discount FROM OrderDetails JOIN (SELECT OrderID FROM OrderDetails WHERE Quantity >= 60 GROUP BY OrderID, Quantity HAVING COUNT(*) > 1) AS PotentialProblemOrders ON PotentialProblemOrders.OrderID = OrderDetails.OrderID ORDER BY OrderID, ProductID) from 20 rows to 16 instead  */
/* 40.  Needed the distinct first */ 
-- SELECT OrderDetails.OrderID, ProductID, UnitPrice, Quantity, Discount FROM OrderDetails JOIN (SELECT DISTINCT OrderID FROM OrderDetails WHERE Quantity >= 60 GROUP BY OrderID, Quantity HAVING COUNT(*) > 1) AS PotentialProblemOrders ON PotentialProblemOrders.OrderID = OrderDetails.OrderID ORDER BY OrderID, ProductID ;

/* 41. Show which orders are arriving late.. Sort the results by OrderID */ -- SELECT * FROM orders WHERE RequiredDate < ShippedDate ORDER BY OrderID ; 

/* 42.  Which salespeople have the most orders arriving late ? */ -- SELECT o.EmployeeID, e.LastName, COUNT(*) AS TotalLateOrders FROM orders AS o JOIN employees e ON o.EmployeeID = e.EmployeeID WHERE RequiredDate <= ShippedDate GROUP BY o.EmployeeID, e.LastName ORDER BY TotalLateOrders DESC;

/* 43. Show the total number of orders per salesperson that are late and that are on time */ -- (SELECT o.EmployeeID, e.LastName, COUNT(*) AS TotalLateOrders FROM orders AS o JOIN employees e ON o.EmployeeID = e.EmployeeID WHERE RequiredDate <= ShippedDate GROUP BY o.EmployeeID, e.LastName ORDER BY TotalLateOrders DESC;)
--(SELECT o.EmployeeID, e.LastName, COUNT(*) AS TotalLateOrders FROM orders AS o JOIN employees e ON o.EmployeeID = e.EmployeeID WHERE RequiredDate <= ShippedDate GROUP BY o.EmployeeID, e.LastName ORDER BY TotalLateOrders DESC;) AS LateOrders 
--(SELECT o.EmployeeID, e.LastName, COUNT(*) AS TotalLateOrders FROM orders AS o JOIN employees e ON o.EmployeeID = e.EmployeeID GROUP BY o.EmployeeID, e.LastName ORDER BY TotalLateOrders DESC;) AS AllOrders
-- SELECT * FROM (SELECT o.EmployeeID AS os, e.LastName, COUNT(*) AS TotalLateOrders FROM orders AS o JOIN employees e ON o.EmployeeID = e.EmployeeID WHERE RequiredDate <= ShippedDate GROUP BY o.EmployeeID, e.LastName ) AS LateOrders JOIN (SELECT o.EmployeeID AS EmployeeID, COUNT(*) AS TotalOrders FROM orders AS o JOIN employees e ON o.EmployeeID = e.EmployeeID GROUP BY o.EmployeeID, e.LastName ) AS AllOrders ON LateOrders.TotalLateOrders = AllOrders.EmployeeID ; 

/* 44.  SHow a list of all employees who have taken orders, late and all together */ -- SELECT employees.EmployeeID, employees.LastName, AllOrders.TotalOrders, LateOrders.TotalLateOrders  FROM employees JOIN (SELECT o.EmployeeID AS EmployeeID, COUNT(*) AS TotalOrders FROM orders AS o  JOIN employees e ON o.EmployeeID = e.EmployeeID GROUP BY o.EmployeeID, e.LastName ) AS AllOrders ON employees.EmployeeID = AllOrders.EmployeeID LEFT JOIN  (SELECT o.EmployeeID AS os, e.LastName, COUNT(*) AS TotalLateOrders FROM orders AS o JOIN employees e ON o.EmployeeID = e.EmployeeID WHERE RequiredDate <= ShippedDate GROUP BY o.EmployeeID, e.LastName ) AS LateOrders ON employees.EmployeeID = LateOrders.os
-- ORDER BY employees.EmployeeID ;

/* 45. Change null to a 0 in the table list */ 
--SELECT employees.EmployeeID, employees.LastName, AllOrders.TotalOrders, LateOrders = IsNULL(LateOrders.TotalLateOrders,0)  FROM employees JOIN (SELECT o.EmployeeID AS EmployeeID, COUNT(*) AS TotalOrders FROM orders AS o  JOIN employees e ON o.EmployeeID = e.EmployeeID GROUP BY o.EmployeeID, e.LastName ) AS AllOrders ON employees.EmployeeID = AllOrders.EmployeeID LEFT JOIN  (SELECT o.EmployeeID AS os, e.LastName, COUNT(*) AS TotalLateOrders FROM orders AS o JOIN employees e ON o.EmployeeID = e.EmployeeID WHERE RequiredDate <= ShippedDate GROUP BY o.EmployeeID, e.LastName ) AS LateOrders ON employees.EmployeeID = LateOrders.os
 --ORDER BY employees.EmployeeID ;

 /* 46. Get the percentages of late orders over total orders */ -- SELECT employees.EmployeeID, employees.LastName, AllOrders.TotalOrders, LateOrders = IsNULL(LateOrders.TotalLateOrders,0), Percent_Late_Orders = ((IsNULL(LateOrders.TotalLateOrders,0)*1.00)/ AllOrders.TotalOrders )  FROM employees JOIN (SELECT o.EmployeeID AS EmployeeID, COUNT(*) AS TotalOrders FROM orders AS o  JOIN employees e ON o.EmployeeID = e.EmployeeID GROUP BY o.EmployeeID, e.LastName ) AS AllOrders ON employees.EmployeeID = AllOrders.EmployeeID LEFT JOIN  (SELECT o.EmployeeID AS os, e.LastName, COUNT(*) AS TotalLateOrders FROM orders AS o JOIN employees e ON o.EmployeeID = e.EmployeeID WHERE RequiredDate <= ShippedDate GROUP BY o.EmployeeID, e.LastName ) AS LateOrders ON employees.EmployeeID = LateOrders.os
 -- ORDER BY employees.EmployeeID ;

/* 47. Let's cut the decimal point to 2 digits */ -- SELECT employees.EmployeeID, employees.LastName, AllOrders.TotalOrders, LateOrders = IsNULL(LateOrders.TotalLateOrders,0), Percent_Late_Orders = CAST((ROUND(((IsNULL(LateOrders.TotalLateOrders,0)*1.00)/ AllOrders.TotalOrders ), 3)) AS FLOAT) FROM employees JOIN (SELECT o.EmployeeID AS EmployeeID, COUNT(*) AS TotalOrders FROM orders AS o  JOIN employees e ON o.EmployeeID = e.EmployeeID GROUP BY o.EmployeeID, e.LastName ) AS AllOrders ON employees.EmployeeID = AllOrders.EmployeeID LEFT JOIN  (SELECT o.EmployeeID AS os, e.LastName, COUNT(*) AS TotalLateOrders FROM orders AS o JOIN employees e ON o.EmployeeID = e.EmployeeID WHERE RequiredDate <= ShippedDate GROUP BY o.EmployeeID, e.LastName ) AS LateOrders ON employees.EmployeeID = LateOrders.os
  -- ORDER BY employees.EmployeeID ;

 /* 48. Show only customers who have orders in 2016 and group them into categories from 0-1000, 1000-5000,5000-10000,10000>x... */ -- (SELECT c.CustomerID AS cus, c.CompanyName AS com, SUM(od.UnitPrice * od.Quantity) AS TotalSales FROM customers AS c JOIN orders AS o ON c.CustomerID = o.CustomerID JOIN orderdetails AS od ON o.OrderID = od.OrderID WHERE OrderDate LIKE '%2016%' GROUP BY c.CustomerID, c.CompanyName;)

 -- (SELECT lo.cus, lo.com, lo.TotalSales, CustomerGroup = CASE WHEN TotalSales <= 1000 THEN 'Low' WHEN TotalSales <= 5000 AND TotalSales >= 1001 THEN 'Medium' WHEN TotalSales >= 5001 AND TotalSales <= 10000 THEN 'High' WHEN TotalSales > 10000 THEN 'Very High' END  FROM (SELECT c.CustomerID AS cus, c.CompanyName AS com, SUM(od.UnitPrice * od.Quantity) AS TotalSales FROM customers AS c JOIN orders AS o ON c.CustomerID = o.CustomerID JOIN orderdetails AS od ON o.OrderID = od.OrderID WHERE OrderDate LIKE '%2016%' GROUP BY c.CustomerID, c.CompanyName) AS lo );

/* 49. In previous problem there is one null value for Maison Dewey. Change this so there are no nulls in the field. */ 
 --SELECT lo.cus, lo.com, lo.TotalSales, CustomerGroup = CASE WHEN TotalSales <= 1000 THEN 'Low' WHEN TotalSales <= 5000 AND TotalSales >= 1001 THEN 'Medium' WHEN TotalSales >= 5000 AND TotalSales <= 10000 THEN 'High' WHEN TotalSales > 10000 THEN 'Very High' END  FROM (SELECT c.CustomerID AS cus, c.CompanyName AS com, SUM(od.UnitPrice * od.Quantity) AS TotalSales FROM customers AS c JOIN orders AS o ON c.CustomerID = o.CustomerID JOIN orderdetails AS od ON o.OrderID = od.OrderID WHERE OrderDate LIKE '%2016%' GROUP BY c.CustomerID, c.CompanyName) AS lo ;

/* 50. Based on above question, show all CustomerGroups and the percentages in each. Sort by total and in descending order. */ 
 --(SELECT lo.cus, lo.com, lo.TotalSales, CustomerGroup = CASE WHEN TotalSales <= 1000 THEN 'Low' WHEN TotalSales <= 5000 AND TotalSales >= 1001 THEN 'Medium' WHEN TotalSales >= 5000 AND TotalSales <= 10000 THEN 'High' WHEN TotalSales > 10000 THEN 'Very High' END  FROM (SELECT c.CustomerID AS cus, c.CompanyName AS com, SUM(od.UnitPrice * od.Quantity) AS TotalSales FROM customers AS c JOIN orders AS o ON c.CustomerID = o.CustomerID JOIN orderdetails AS od ON o.OrderID = od.OrderID WHERE OrderDate LIKE '%2016%' GROUP BY c.CustomerID, c.CompanyName) AS lo ;

-- SELECT lo.cus, lo.com, lo.TotalSales, CustomerGroup = CASE WHEN TotalSales <= 1000 THEN 'Low' WHEN TotalSales <= 5000 AND TotalSales >= 1001 THEN 'Medium' WHEN TotalSales >= 5000 AND TotalSales <= 10000 THEN 'High' WHEN TotalSales > 10000 THEN 'Very High' END  FROM (SELECT c.CustomerID AS cus, c.CompanyName AS com, SUM(od.UnitPrice * od.Quantity) AS TotalSales FROM customers AS c JOIN orders AS o ON c.CustomerID = o.CustomerID JOIN orderdetails AS od ON o.OrderID = od.OrderID WHERE OrderDate LIKE '%2016%' GROUP BY c.CustomerID, c.CompanyName) AS lo ;

-- SELECT customers.CustomerID, customers.CompanyName, TotalOrderAmount = SUM(Quantity * UnitPrice) FROM customers JOIN orders ON orders.CustomerID = customers.CustomerID JOIN orderdetails ON orders.OrderID = orderdetails.OrderID WHERE OrderDate LIKE '%2016%' GROUP BY customers.CustomerID, customers.CompanyName ;

/* 51, Show all defined CustomerGroups the tally of each value and the percentages in each. Sort by the total in each group, descending */
--SELECT customers.CustomerID, customers.CompanyName, TotalOrderAmount = SUM(Quantity * UnitPrice) into CustomerGrouping
-- FROM customers JOIN orders ON orders.CustomerID = customers.CustomerID JOIN orderdetails ON orders.OrderID = orderdetails.OrderID WHERE OrderDate LIKE '%2016%'
-- GROUP BY customers.CustomerID, customers.CompanyName ;
 -- SELECT  CustomerGroup, COUNT(*) AS TotalInGroup, PercentageInGroup = (COUNT(*) * 1.0) / (SELECT COUNT(*) FROM CustomerGroup ) FROM CustomerGroup GROUP BY CustomerGroup ORDER BY TotalInGroup DESC;

/* 52. Show list of countries used from suppliers and customers */ -- SELECT Country FROM Suppliers UNION  SELECT Country FROM Customers ORDER BY Country ; 

/* 53. Show a list of countries divided into a supplier and country list */ 
SELECT SupplierList.Country, SupplierList.TotalSuppliers, CustomerList.TotalCustomers AS TotalCustomers FROM SupplierList FULL OUTER JOIN CustomerList ON SupplierList.Country = CustomerList.Country ;

/* 54. Show list of countries divided into a supplier and country list EXCLUDING the null and replacing with a zero */ 
-- SELECT SupplierList.Country, SupplierList.TotalSuppliers, ISNULL(CustomerList.TotalCustomers, 0) AS TotalCustomers FROM SupplierList FULL OUTER JOIN CustomerList ON SupplierList.Country = CustomerList.Country ;

/* 55. Show a list of countries including the earliest order created with the ShipCountry, CustomerID, OrderID, and OrderDate */ 
--SELECT ShipCountry, CustomerID, OrderID, OrderDate = convert(date, OrderDate), RowNumberPerCountry = Row_Number() OVER (PARTITION BY ShipCountry ORDER BY ShipCountry, OrderID) INTO ListOrders  FROM orders ;
-- SELECT ShipCountry, CustomerID, OrderID, OrderDate, RowNumberPerCountry FROM ListOrders WHERE RowNumberPerCountry = 1 ORDER BY ShipCountry   ;







